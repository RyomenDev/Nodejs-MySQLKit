-- Create and use the database
CREATE DATABASE tf_demo;
USE tf_demo;

-- Create the 'users' table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample data into 'users'
INSERT INTO users (name, email) VALUES 
    ('John Doe', 'john@example.com'),
    ('Jane Smith', 'jane@example.com'),
    ('Alice Johnson', 'alice@example.com'),
    ('Bob Brown', 'bob@example.com');

-- Create the 'posts' table
CREATE TABLE posts (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    title VARCHAR(255) NOT NULL,
    body TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Insert sample data into 'posts'
INSERT INTO posts (user_id, title, body) VALUES
    (1, 'Welcome to My Blog', 'This is the first post of the blog.'),
    (2, 'Travel Tips', 'Here are some useful travel tips for beginners.'),
    (3, 'Healthy Living', 'A guide to maintaining a healthy lifestyle.'),
    (1, 'Tech Trends', 'Top tech trends to watch in 2025.');

-- Create the 'comments' table
CREATE TABLE comments (
    id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Insert sample data into 'comments'
INSERT INTO comments (post_id, user_id, content) VALUES
    (1, 2, 'Great post! Thanks for sharing.'),
    (1, 3, 'Looking forward to more updates.'),
    (2, 1, 'This is very helpful, thanks!'),
    (3, 4, 'Excellent advice, very well written.');

-- Create the 'categories' table
CREATE TABLE categories (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE
);

-- Insert sample data into 'categories'
INSERT INTO categories (name) VALUES 
    ('Technology'),
    ('Health'),
    ('Travel'),
    ('Lifestyle');

-- Create the 'post_categories' table
CREATE TABLE post_categories (
    post_id INT NOT NULL,
    category_id INT NOT NULL,
    PRIMARY KEY (post_id, category_id),
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
);

-- Assign categories to posts
INSERT INTO post_categories (post_id, category_id) VALUES
    (1, 1),
    (2, 3),
    (3, 2),
    (4, 1),
    (4, 4);

-- Create the 'likes' table
CREATE TABLE likes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    post_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Insert sample data into 'likes'
INSERT INTO likes (post_id, user_id) VALUES
    (1, 2),
    (1, 3),
    (2, 1),
    (3, 4),
    (4, 2);

-- Example queries (optional, for reference)

-- Fetch all posts with their authors and categories
-- SELECT p.id AS post_id, p.title, u.name AS author, GROUP_CONCAT(c.name) AS categories
-- FROM posts p
-- JOIN users u ON p.user_id = u.id
-- JOIN post_categories pc ON p.id = pc.post_id
-- JOIN categories c ON pc.category_id = c.id
-- GROUP BY p.id;

-- Get all comments for a specific post
-- SELECT c.content, u.name AS commenter, c.created_at
-- FROM comments c
-- JOIN users u ON c.user_id = u.id
-- WHERE c.post_id = 1;

-- Get the most liked posts
-- SELECT p.title, u.name AS author, COUNT(l.id) AS likes
-- FROM posts p
-- JOIN users u ON p.user_id = u.id
-- LEFT JOIN likes l ON p.id = l.post_id
-- GROUP BY p.id
-- ORDER BY likes DESC;

-- Fetch all users and the number of posts theyâ€™ve created
-- SELECT u.name, COUNT(p.id) AS post_count
-- FROM users u
-- LEFT JOIN posts p ON u.id = p.user_id
-- GROUP BY u.id;
